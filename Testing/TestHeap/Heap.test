#include <Heap.h>
#include <Array.h>
#include <random>
#include <algorithm>

TEST(HeapConstructor, EmptyConstructor) {
    Heap<int> h;
    EXPECT_TRUE(h.empty());
    EXPECT_EQ(h.size(), 0);
}

TEST(HeapUsage, Insert) {
    int n = 100;
    Heap<int> h;
    for (int i = 0; i < n; ++i) {
        h.insert(n - i);
        EXPECT_EQ(h.size(), i + 1);
        EXPECT_EQ(h.getMin(), n - i);
    }
}

TEST(HeapUsage, ExtractMinAndGetMin) {
    int n = 100;
    Heap<int> h;
    Array<int> a(n);
    for (int i = 0; i < n; ++i) {
        a[i] = i;
    }
    int seed = 100500;
    std::shuffle(a.begin(), a.end(), std::default_random_engine(seed));
    for (int i = 0; i < n; ++i) {
        h.insert(a[i]);
        EXPECT_EQ(h.size(), i + 1);
        EXPECT_FALSE(h.empty());
    }
    for (int i = 0; i < n; ++i) {
        int here = h.getMin();
        EXPECT_EQ(here, i);
        EXPECT_EQ(h.extractMin(), here);
        EXPECT_EQ(h.size(), n - i - 1);
    }
    EXPECT_TRUE(h.empty());
}

TEST(HeapConstructor, IteratorsConstructor) {
    int n = 100;
    Array<int> a(n);
    for (int i = 0; i < n; ++i) {
        a[i] = i;
    }
    int seed = 100500;
    std::shuffle(a.begin(), a.end(), std::default_random_engine(seed));
    Heap<int> h(a.begin(), a.end());
    EXPECT_EQ(h.size(), a.size());
    EXPECT_FALSE(h.empty());
    for (int i = 0; i < n; ++i) {
        EXPECT_EQ(h.extractMin(), i);
    }
    EXPECT_TRUE(h.empty());
}

TEST(HeapUsage, Pointers) {
    int n = 100;
    Array<Heap<int>::Pointer> a;
    Heap<int> h;
    for (int i = 0; i < n; ++i) {
        a.push(h.insert(i));
    }
    for (int i = 0; i < n; ++i) {
        EXPECT_EQ(a[i]->get(), i);
    }
    Array<bool> has(n, true);
    int seed = 100500;
    std::shuffle(a.begin(), a.end(), std::default_random_engine(seed));
    for (int i = 0; i < n; ++i) {
        int mini;
        for (mini = 0; !has[mini]; ++mini) {}
        EXPECT_EQ(mini, h.extractMin());
        has[mini] = false;
        EXPECT_EQ(h.size(), n - i - 1);
    }
    EXPECT_TRUE(h.empty());
}

TEST(HeapUsage, Erase) {
    int n = 100;
    Heap<int> h;
    Array<Heap<int>::Pointer> a;
    for (int i = 0; i < n; ++i) {
        a.push(h.insert(i));
    }
    int seed = 100500;
    std::shuffle(a.begin(), a.end(), std::default_random_engine(seed));
    Array<bool> has(n, true);
    for (int i = 0; i < n; ++i) {
        int mini;
        for (mini = 0; !has[mini] && mini < n; ++mini) {}
        EXPECT_EQ(mini, h.getMin());
        has[a[i]->get()] = false;
        h.erase(a[i]);
        EXPECT_EQ(h.size(), n - i - 1);
    }
    EXPECT_TRUE(h.empty());
}

TEST(HeapUsage, Optimize) {
    int ninsert = 1000, nerase = 10;
    int n = ninsert + nerase;
    Array<int> a(n, 1);
    for (int i = ninsert; i < n; ++i) {
        a[i] = 0;
    }
    int seed = 100500;
    std::shuffle(a.begin(), a.end(), std::default_random_engine(seed));
    Array<int> toInsert(ninsert);
    std::iota(toInsert.begin(), toInsert.end(), 0);
    seed += seed;
    std::shuffle(toInsert.begin(), toInsert.end(), std::default_random_engine(seed));
    Heap<int> h;
    Array<bool> was(ninsert, false);
    int wasInsert = 0;
    for (int i = 0; i < n; ++i) {
        if (a[i] == 1) {
            h.insert(toInsert[wasInsert]);
            was[toInsert[wasInsert++]] = true;
        } else {
            int mini;
            for (mini = 0; mini < n && !was[mini]; ++mini) { }
            try {
                EXPECT_EQ(mini, h.extractMin());
                was[mini] = false;
            } catch (std::out_of_range &e) {
                EXPECT_EQ(mini, n);
            }
        }
    }
}

TEST(HeapUsage, Change) {
    int n = 100;
    Array<int> a(n);
    iota(a.begin(), a.end(), 0);
    Array<Heap<int>::Pointer> ptr1, ptr2;
    Heap<int> h1, h2;
    for (int i = 0; i < n; ++i) {
        ptr1.push(h1.insert(a[i]));
        ptr2.push(h2.insert(a[i]));
    }
    int seed = 100500;
    srand(seed);
    Array<bool> here(n, true);
    for (int iter = 0; iter < n; ++iter) {
        int change = rand() % (n - iter) + 1;
        int ind = 0;
        for (; change; change -= here[ind++]) { }
        ind--;
        int to = rand();
        h1.change(ptr1[ind], to);
        *ptr2[ind] = to;
        a[ind] = to;
        EXPECT_EQ(h1.getMin(), h2.getMin());
        int toDel = h1.getMin();
        int indDel = -1;
        for (int i = 0; i < n; ++i) {
            EXPECT_TRUE(!here[i] || a[i] >= toDel);
            if (here[i] && a[i] == toDel) {
                indDel = i;
            }
        }
        EXPECT_TRUE(indDel >= 0);
        here[indDel] = false;
        EXPECT_EQ(h1.extractMin(), h2.extractMin());
    }
}

TEST(HeapUsage, Exception) {
    Heap<int> h;
    EXPECT_THROW(h.getMin(), std::out_of_range);
    EXPECT_THROW(h.extractMin(), std::out_of_range);
}