#include <ctime>
#include <random>
#include <functional>
#include <cmath>
#include <Array.h>
#include <Heap.h>
#include <BinomialHeap.h>
#include <FibHeap.h>
#include <string>

void printRes(const std::string &s, int n, double t) {
    std::cout << s << " time with n = " << n << " queries is " << t << " seconds\n";
}

void fillCmd(int mod, Array<int> &cmd) {
    for (auto &c : cmd) {
        c = rand() % mod;
    }
}

template<class T, class Hp, typename... Heaps>
void printOne(int n, std::function<double(PriorityQueue<T> *)> func) {
    auto h = new Hp;
    auto t = func(h);
    delete(h);
    printRes(typeid(Hp).name(), n, t);
    printOne<T, Heaps...>(n, func);
}

template<typename T>
void printOne(int n, std::function<double(PriorityQueue<T> *)> func) { }

template<typename T, typename... Heaps>
void print(const std::string &head, int n, std::function<double(PriorityQueue<T> *)> func) {
    std::cout << head << ":\n\n\n";
    printOne<T, Heaps...>(n, func);
    std::cout << "\n-----------------------------------------\n" << std::endl;
}

TEST(SpeedTest, InsertErase) {
    int seed = 100500;
    srand(seed);
    int n = (int) 1e6;
    Array<int> cmd(n);
    fillCmd(3, cmd);
    auto proc = [&](PriorityQueue<int> *heap) {
        int seed2 = seed * 104;
        srand(seed2);
        auto tm = clock();
        Array<PriorityQueue<int>::Pointer> ptrs;
        for (auto c : cmd) {
            switch (c) {
                case 0: {
                    heap->insert(rand());
                    break;
                }
                case 1: {
                    try {
                        heap->extractMin();
                    } catch (...) { }
                    break;
                }
                case 2: {
                    try {
                        heap->getMin();
                    } catch (...) { }
                    break;
                }
                default:break;
            }
        }
        return double(clock() - tm) / CLOCKS_PER_SEC;
    };
    print<int, Heap<int>, BinomialHeap<int>, FibHeap<int>>("Insert and erase time test", n, proc);
}

TEST(SpeedTest, InsertChange) {
    int seed = 100500;
    srand(seed);
    int n = (int) 1e6;
    Array<int> cmd(n);
    for (int i = 0; i < n; ++i) {
        cmd[i] = rand() % 2;
    }
    auto proc = [&](PriorityQueue<int> *heap) {
        int seed2 = seed * 104;
        srand(seed2);
        auto tm = clock();
        Array<PriorityQueue<int>::Pointer> ptrs;
        for (auto c : cmd) {
            switch (c) {
                case 0: {
                    ptrs.push(heap->insert(rand()));
                    break;
                }
                case 1: {
                    if (ptrs.empty()) continue;
                    *ptrs[rand() % ptrs.size()] = rand();
                    break;
                }
                default:break;
            }
        }
        return double(clock() - tm) / CLOCKS_PER_SEC;
    };
    print<int, Heap<int>, BinomialHeap<int>, FibHeap<int>>("Insert ans change time test", n, proc);
}

TEST(SpeedTest, Insert) {
    int seed = 100500;
    int n = (int) 1e6;
    auto proc = [&](PriorityQueue<int> *heap) {
        srand(seed);
        auto tm = clock();
        for (int i = 0 ; i < n; ++i) {
            heap->insert(rand());
        }
        return double(clock() - tm) / CLOCKS_PER_SEC;
    };
    print<int, Heap<int>, BinomialHeap<int>, FibHeap<int>>("Insert time test", n, proc);
}

TEST(SpeedTest, InsertAndMerge) {
    int seed = 100500;
    int n = (int) 1e6;
    auto proc = [&](PriorityQueue<int> *heap) {
        srand(seed);
        bool isBH = dynamic_cast<BinomialHeap<int> *>(heap);
        PriorityQueue<int> *heap2 = nullptr;
        if (isBH) {
            heap2 = new BinomialHeap<int>;
        } else {
            heap2 = new FibHeap<int>;
        }
        auto tm = clock();
        for (int i = 0; i < n; ++i) {
            heap->insert(rand());
            heap2->insert(rand());
        }
        if (isBH) {
            dynamic_cast<BinomialHeap<int> *>(heap)->merge(*dynamic_cast<BinomialHeap<int> *>(heap2));
        } else {
            dynamic_cast<FibHeap<int> *>(heap)->merge(*dynamic_cast<FibHeap<int> *>(heap2));
        }
        delete heap2;
        return double(clock() - tm) / CLOCKS_PER_SEC;
    };
    print<int, BinomialHeap<int>, FibHeap<int>>("Insert and merge test", n, proc);
}

TEST(SpeedTest, InsertChangeEraseExtract) {
    int seed = 100500;
    int n = (int) 1e6;
    Array<int> cmd(n);
    fillCmd(4, cmd);
    auto proc = [&](PriorityQueue<int> *heap) {
        srand(seed);
        Array<PriorityQueue<int>::Pointer> pts;
        Array<int> vals;
        std::set<int> erased;
        auto tm = clock();
        for (auto c : cmd) {
            switch (c) {
                case 0: {
                    vals.push(rand());
                    pts.push(heap->insert(vals[-1]));
                    break;
                }
                case 1: {
                    if (pts.empty()) continue;
                    int ind = rand() % pts.size();
                    auto now = clock();
                    bool need = erased.find(vals[ind]) == erased.end();
                    if (need) erased.insert(vals[ind]);
                    tm += clock() - now;
                    if (need) heap->erase(pts[ind]);
                    break;
                }
                case 2: {
                    if (pts.empty()) continue;
                    int ind = rand() % pts.size();
                    auto now = clock();
                    bool need = erased.find(vals[ind]) == erased.end();
                    tm += clock() - now;
                    if (need) *pts[ind] = vals[ind] = rand();
                    break;
                }
                case 3: {
                    try {
                        int ret = heap->extractMin();
                        auto now = clock();
                        erased.insert(ret);
                        tm += clock() - now;
                    } catch (...) {
                        EXPECT_TRUE(heap->empty());
                    }
                }
                default:break;
            }
        }
        return double(clock() - tm) / CLOCKS_PER_SEC;
    };
    print<int, Heap<int>, BinomialHeap<int>, FibHeap<int>>("Mass test", n, proc);
}

TEST(SpeedTest, Optimize) {
    int seed = 100500;
    int n = (int) 1e6;
    for (double st = 0.05; st < 1; st += 0.05) {
        bool wasOptimized = false;
        int insertCount = n, extractCount = (int)std::pow(insertCount, st);
        auto num = insertCount + extractCount;
        Array<int> cmd(num, 0);
        for (int i = 0; i < n; ++i) {
            cmd[i] = 1;
        }
        shuffle(cmd.begin(), cmd.end(), std::default_random_engine(seed));
        auto proc = [&](PriorityQueue<int> *heap) {
            auto tm = clock();
            if (!wasOptimized) {
                dynamic_cast<Heap<int> *>(heap)->optimize(insertCount, extractCount);
                wasOptimized = false;
            }
            for (auto c : cmd) {
                switch (c) {
                    case 0: {
                        heap->insert(rand());
                        break;
                    }
                    case 1: {
                        try {
                            heap->extractMin();
                        } catch (...) { }
                        break;
                    }
                    default: break;
                }
            }
            return double(clock() - tm) / CLOCKS_PER_SEC;
        };
        print<int, Heap<int>, Heap<int>>("Optimize test with extract = insert^(" + std::to_string(st) + ")", n, proc);
    }
}