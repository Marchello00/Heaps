#include <ctime>
#include <random>
#include <Array.h>
#include <Heap.h>
#include <BinomialHeap.h>
#include <FibHeap.h>

void print(const std::string &s, int n, double t) {
    std::cout << s << " time with n = " << n << " queries is " << t << " seconds\n";
}

TEST(SpeedTest, InsertErase) {
    std::cout << "Insert and erase time test:\n\n\n";
    int seed = 100500;
    srand(seed);
    int n = (int) 1e6;
    Array<int> cmd(n);
    for (int i = 0; i < n; ++i) {
        cmd[i] = rand() % 3;
    }
    auto proc = [&](PriorityQueue<int> &heap) {
        auto tm = clock();
        int seed2 = seed * 104;
        srand(seed2);
        Array<PriorityQueue<int>::Pointer> ptrs;
        for (auto c : cmd) {
            switch (c) {
                case 0: {
                    heap.insert(rand());
                    break;
                }
                case 1: {
                    try {
                        heap.extractMin();
                    } catch (...) { }
                    break;
                }
                case 2: {
                    try {
                        heap.getMin();
                    } catch (...) { }
                    break;
                }
                default:break;
            }
        }
        return double(clock() - tm) / CLOCKS_PER_SEC;
    };
    Heap<int> h;
    auto t1 = proc(h);
    BinomialHeap<int> bh;
    print("Heap", n, t1);
    auto t2 = proc(bh);
    print("BinpmialHeap", n, t2);
    FibHeap<int> fh;
    auto t3 = proc(fh);
    print("FibHeap", n, t3);
    std::cout << "\n-----------------------------------------\n\n";
}

TEST(SpeedTest, InsertChange) {
    std::cout << "Insert ans change time test:\n\n\n";
    int seed = 100500;
    srand(seed);
    int n = (int) 1e6;
    Array<int> cmd(n);
    for (int i = 0; i < n; ++i) {
        cmd[i] = rand() % 2;
    }
    auto proc = [&](PriorityQueue<int> &heap) {
        auto tm = clock();
        int seed2 = seed * 104;
        srand(seed2);
        Array<PriorityQueue<int>::Pointer> ptrs;
        for (auto c : cmd) {
            switch (c) {
                case 0: {
                    ptrs.push(heap.insert(rand()));
                    break;
                }
                case 1: {
                    if (ptrs.empty()) continue;
                    *ptrs[rand() % ptrs.size()] = rand();
                    break;
                }
                default:break;
            }
        }
        return double(clock() - tm) / CLOCKS_PER_SEC;
    };
    Heap<int> h;
    auto t1 = proc(h);
    BinomialHeap<int> bh;
    print("Heap", n, t1);
    auto t2 = proc(bh);
    print("BinpmialHeap", n, t2);
    FibHeap<int> fh;
    auto t3 = proc(fh);
    print("FibHeap", n, t3);
    std::cout << "\n-----------------------------------------\n\n";
}